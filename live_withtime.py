import requests               # For making HTTP requests to the API
import pandas as pd           # For data manipulation and writing to Excel
import openpyxl               # To enable Excel writing with Pandas
import schedule               # For scheduling periodic updates
import time                   # For creating delays in the loop
from datetime import datetime, timedelta  # For timestamp calculations
import matplotlib.pyplot as plt  # For generating charts/visualizations
from docx import Document     # For creating/updating the Word document
from docx.shared import Inches  # For specifying picture size in the Word document
import logging                # For logging events

# Configure logging to display the time, level, and message.
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Define your Dropbox folder path.
# Replace 'Anas' with your actual username if needed.
dropbox_folder = r"C:\Users\Anas\Dropbox"

def fetch_crypto_data():
    """
    Fetch live cryptocurrency data from the CoinGecko API.

    Returns:
        list: Parsed JSON data containing cryptocurrency details,
              or None if the request fails.
    """
    url = "https://api.coingecko.com/api/v3/coins/markets"
    params = {
        "vs_currency": "usd",          # Prices in USD
        "order": "market_cap_desc",    # Order results by descending market cap
        "per_page": 50,                # Fetch the top 50 cryptocurrencies
        "page": 1,
        "sparkline": "false"           # Do not include sparkline data
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()  # Raises an HTTPError if status is not OK
        logging.info("Successfully fetched cryptocurrency data.")
        return response.json()       # Return the JSON response as Python data
    except requests.RequestException as e:
        logging.error("Error fetching data: %s", e)
        return None

def analyze_data(data):
    """
    Analyze the fetched cryptocurrency data.

    Args:
        data (list): List of dictionaries containing cryptocurrency data.

    Returns:
        tuple: A tuple (df, analysis) where:
            - df (DataFrame): DataFrame containing selected cryptocurrency fields.
            - analysis (dict): Dictionary with analysis results including:
                  * Top 5 cryptocurrencies by market cap.
                  * Average current price of the top 50.
                  * Cryptocurrency with the highest 24-hour percentage change.
                  * Cryptocurrency with the lowest 24-hour percentage change.
    """
    df = pd.DataFrame(data, columns=[
        "name", "symbol", "current_price", "market_cap", "total_volume", "price_change_percentage_24h"
    ])

    top_5 = df.nlargest(5, "market_cap")[["name", "market_cap"]]
    avg_price = df["current_price"].mean()
    highest_change = df.loc[df["price_change_percentage_24h"].idxmax()]
    lowest_change = df.loc[df["price_change_percentage_24h"].idxmin()]

    analysis = {
        "Top 5 Cryptos": top_5,
        "Average Price": avg_price,
        "Highest 24h Change": highest_change[["name", "price_change_percentage_24h"]].to_dict(),
        "Lowest 24h Change": lowest_change[["name", "price_change_percentage_24h"]].to_dict(),
    }

    logging.info("Data analysis completed.")
    return df, analysis

def update_word_report(analysis, dropbox_folder):
    """
    Create and update a detailed Word document analysis report.

    The report includes:
      - Title Page with the report title, date, and preparer's name.
      - Executive Summary.
      - Methodology.
      - Data Overview.
      - Detailed Findings (including a table of the top 5 cryptocurrencies, average price,
        and 24-hour price change analysis).
      - Visualizations (with a bar chart image).
      - Additional Observations.
      - Conclusion and Recommendations.

    Args:
        analysis (dict): Analysis results generated by the analyze_data function.
        dropbox_folder (str): Path to the Dropbox folder where the report will be saved.
    """
    doc = Document()

    # Title Page
    doc.add_heading("Cryptocurrency Market Analysis Report", 0)
    doc.add_paragraph(f"Date: {datetime.now().strftime('%Y-%m-%d')}")
    doc.add_paragraph("Prepared by: Anas Sheikh")
    doc.add_page_break()

    # Executive Summary
    doc.add_heading("Executive Summary", level=1)
    doc.add_paragraph(
        "This report provides a comprehensive analysis of the current cryptocurrency market. "
        "Based on live data from the CoinGecko API, it examines the top 50 cryptocurrencies, highlighting "
        "the top 5 by market capitalization, the average price across these assets, and the most extreme "
        "24-hour price fluctuations. The report also includes visualizations to support the analysis."
    )

    # Methodology
    doc.add_heading("Methodology", level=1)
    doc.add_paragraph(
        "Data was fetched live from the CoinGecko API every 5 minutes. The dataset includes details such as "
        "cryptocurrency name, symbol, current price (USD), market capitalization, trading volume, and the "
        "24-hour price change percentage. Analysis was performed using Python with Pandas for data manipulation "
        "and Matplotlib for generating visualizations."
    )

    # Data Overview
    doc.add_heading("Data Overview", level=1)
    doc.add_paragraph(
        "The analysis focuses on the top 50 cryptocurrencies by market capitalization. The key metrics evaluated "
        "include current price, market capitalization, trading volume, and 24-hour price change percentage."
    )

    # Detailed Findings
    doc.add_heading("Detailed Findings", level=1)
    
    # Top 5 Cryptocurrencies Table
    doc.add_heading("Top 5 Cryptocurrencies by Market Capitalization", level=2)
    table = doc.add_table(rows=1, cols=2)
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = 'Cryptocurrency'
    hdr_cells[1].text = 'Market Cap (USD)'
    top5_df = analysis["Top 5 Cryptos"]
    for idx, row in top5_df.iterrows():
        row_cells = table.add_row().cells
        row_cells[0].text = str(row['name'])
        row_cells[1].text = f"${int(row['market_cap']):,}"
    doc.add_paragraph(
        "The table above lists the top 5 cryptocurrencies by market capitalization, which are key indicators of market leaders."
    )

    # Average Price
    doc.add_heading("Average Price of Top 50 Cryptocurrencies", level=2)
    doc.add_paragraph(f"The calculated average price is: ${analysis['Average Price']:.2f}")

    # 24-Hour Price Change Analysis
    doc.add_heading("24-Hour Price Change Analysis", level=2)
    highest = analysis["Highest 24h Change"]
    lowest = analysis["Lowest 24h Change"]
    doc.add_paragraph(
        f"Highest 24-Hour Change: {highest['name']} with {highest['price_change_percentage_24h']:.2f}% change.\n"
        f"Lowest 24-Hour Change: {lowest['name']} with {lowest['price_change_percentage_24h']:.2f}% change."
    )

    # Visualizations
    doc.add_heading("Visualizations", level=1)
    doc.add_paragraph("The following chart visualizes the market capitalization of the top 5 cryptocurrencies:")
    plt.figure(figsize=(8, 4))
    plt.bar(top5_df["name"], top5_df["market_cap"] / 1e9, color='skyblue')  # Display in billions
    plt.title("Top 5 Cryptocurrencies by Market Cap")
    plt.xlabel("Cryptocurrency")
    plt.ylabel("Market Cap (in Billions USD)")
    plt.tight_layout()
    chart_filename = f"{dropbox_folder}/top5_chart.png"
    plt.savefig(chart_filename)
    plt.close()
    doc.add_picture(chart_filename, width=Inches(6))

    # Additional Observations
    doc.add_heading("Additional Observations", level=1)
    doc.add_paragraph(
        "This analysis is based solely on the latest live data fetched from the CoinGecko API. Due to the volatile "
        "nature of the cryptocurrency market, the data may change rapidly. No historical trends have been included, "
        "as the focus is on providing a snapshot of the current market conditions."
    )

    # Conclusion and Recommendations
    doc.add_heading("Conclusion and Recommendations", level=1)
    doc.add_paragraph(
        "The analysis indicates that while major cryptocurrencies such as Bitcoin and Ethereum dominate the market, "
        "there is significant volatility among other assets. The average price offers a benchmark for overall market "
        "valuation, yet the extreme variations in 24-hour price changes suggest caution. It is recommended that investors "
        "and market observers consider both short-term market fluctuations and long-term fundamentals when making decisions."
    )

    # Save the detailed Word document to the Dropbox folder.
    word_filename = f"{dropbox_folder}/Crypto_Analysis_Report.docx"
    doc.save(word_filename)
    logging.info("Word analysis report updated successfully.")

def update_excel_and_reports():
    """
    Fetch live cryptocurrency data, perform analysis, update the Excel workbook,
    and update the detailed Word analysis report.

    The Excel workbook (saved in the Dropbox folder) contains:
      - 'Crypto Data': The live cryptocurrency data.
      - 'Update Info': Timestamps for the last and next update.

    The Word document contains the detailed analysis report.
    """
    data = fetch_crypto_data()
    if data:
        df, analysis = analyze_data(data)
        now = datetime.now()
        next_update = now + timedelta(minutes=5)
        update_info = pd.DataFrame({
            "Description": ["Last Updated", "Next Update"],
            "Time": [now.strftime("%Y-%m-%d %H:%M:%S"), next_update.strftime("%Y-%m-%d %H:%M:%S")]
        })

        excel_filename = f"{dropbox_folder}/Live_Crypto_Data.xlsx"
        try:
            with pd.ExcelWriter(excel_filename, engine="openpyxl") as writer:
                df.to_excel(writer, index=False, sheet_name="Crypto Data")
                update_info.to_excel(writer, index=False, sheet_name="Update Info")
            logging.info("Excel file updated successfully with live data and update info.")
        except Exception as e:
            logging.error("Error updating Excel file: %s", e)

        try:
            update_word_report(analysis, dropbox_folder)
        except Exception as e:
            logging.error("Error updating Word report: %s", e)
    else:
        logging.error("No data fetched; Excel and Word report not updated.")

if __name__ == '__main__':
    # Schedule the update function to run every 5 minutes.
    schedule.every(5).minutes.do(update_excel_and_reports)
    
    # Perform an initial update immediately.
    update_excel_and_reports()
    
    logging.info("Live data updating every 5 minutes. Press Ctrl+C to stop.")
    
    # Keep the script running indefinitely.
    while True:
        schedule.run_pending()
        time.sleep(1)
